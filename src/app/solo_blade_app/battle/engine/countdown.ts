/**
 * countdown
 * ---------
 * Joue une petite "sÃ©quence de compte Ã  rebours" en appelant `onStep`
 * pour chaque valeur de `steps` avec un dÃ©lai fixe entre chaque Ã©tape.
 *
 * âœ… Comportement actuel :
 *   - ItÃ¨re sur `steps` dans l'ordre (ex: ["3","2","1","Go!"]).
 *   - Ã€ chaque itÃ©ration :
 *       1) appelle `onStep(step)` pour afficher la valeur courante
 *       2) attend `delayMs` millisecondes
 *   - Ã€ la fin, appelle `onStep(null)` pour signaler la fin du compte Ã  rebours.
 *
 * ðŸ§© ParamÃ¨tres :
 *   @param steps   Liste des valeurs Ã  afficher (texte, Ã©mojis, etc.).
 *   @param onStep  Callback invoquÃ© Ã  chaque Ã©tape, et une derniÃ¨re fois avec `null`.
 *                  Typiquement, tu lui passes un setState React (ex: setCountdownVal).
 *   @param delayMs (optionnel) DÃ©lai entre Ã©tapes en ms (par dÃ©faut 800 ms).
 *
 * ðŸ’¡ Exemples d'usage (React) :
 *   await countdown(["3","2","1","Go!"], setCountdownVal);
 *   // -> setCountdownVal("3")   â€¦attend 800ms
 *   // -> setCountdownVal("2")   â€¦attend 800ms
 *   // -> setCountdownVal("1")   â€¦attend 800ms
 *   // -> setCountdownVal("Go!") â€¦attend 800ms
 *   // -> setCountdownVal(null)  (fin)
 *
 * ðŸ›‘ Annulation :
 *   - Cette implÃ©mentation est volontairement simple et **ne gÃ¨re pas l'annulation**.
 *   - Si tu veux pouvoir interrompre un countdown (ex: quitter lâ€™Ã©cran),
 *     tu peux ajouter un flag externe (ex: `let canceled = false`) et tester ce flag
 *     dans la boucle, ou accepter un `AbortSignal` dans la signature (si tu veux Ã©voluer).
 */
export async function countdown(
  steps: string[],
  onStep: (value: string | null) => void,
  delayMs = 800
): Promise<void> {
  for (const step of steps) {
    // 1) Pousse la valeur courante vers lâ€™UI (ex: affiche "3", puis "2", etc.)
    onStep(step);

    // 2) Attend `delayMs` ms avant de passer Ã  la prochaine Ã©tape
    await new Promise((resolve) => setTimeout(resolve, delayMs));
  }

  // 3) Signale explicitement la fin de la sÃ©quence au consommateur
  //    -> pratique pour masquer le gros texte de compte Ã  rebours
  onStep(null);
}
